#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}node;

void enqueue(node **h,node **p)
{
    if((*h)==NULL)
    {
        *h=(node *)malloc(sizeof(node));
        printf("enter the element in the node\n");
        scanf("%d",&(*h)->data);
        (*h)->next=NULL;
        *p = *h;
    }
    else
    {
        node *new = (node *)malloc(sizeof(node));
        printf("enter the element in the node\n");
        scanf("%d",&new->data);
        new->next=NULL;
        (*p)->next=new;
        (*p)=new;
    }
}

void dequeue(node **h,node **p)
{
    if((*h)==NULL)
    {
        printf("QUEUE IS EMPTY\n");
    }
    else
    {
        printf("the element %d is getting deleted\n",(*h)->data);
        node *tp=NULL;
        tp = (*h);
        (*h) = (*h)->next;
        free(tp);
    }
}

void display(node *h, node *t)
{
    t = h;
    if(t==NULL)
    {
        printf("QUEUE IS EMPTY\n");
    }
    else
    {
        while(t!=NULL)
        {
            printf("%d\n",t->data);
            t = t->next;
        }
    }
}

int main()
{
    node *head,*ptr,*temp;
    int front,rear,opt;
    front=rear=-1;
    head=ptr=temp=NULL;
    
    while(1)
    {
        printf("press\n1 for enqueue\n2 for dequeue\n3 for display\n4 to exit\n");
        scanf("%d",&opt);
        switch(opt)
        {
            case 1 : enqueue(&head,&ptr);
                     break;
            case 2 : dequeue(&head,&ptr);
                     break;
            case 3 : display(head,temp);
                     break;
            case 4 : return 0;
        }
    }
    
}
